@page "/"
@inject NavigationManager nav
@using Esp32Api.Models

<PageTitle>Index</PageTitle>

<div class="form-group">
    <label for="ex">Caibrado a (cm)</label>
    <input @bind-value="Calibration" type="number" class="form-control" id="ex"  placeholder="Calibrador">
</div>

<br />
<h5>CONTEO: @Counter</h5>

@if (Temp == null)
{
    <i>SIN INICIALIZAR</i>
}
else
{
    <div style="height: 200px; position: relative">
        <div style="text-align: center ;line-height: 50px ;top: @(Temp.Value)%; position: absolute; height: 50px; width: 50px; transition: ease-in-out all .2s; border-radius: 50%; background-color: #3f51b5; color: white;">@(Temp.Value)cm</div>
    </div>
}

@code {
    private HttpClient httpClient = new();
    private decimal? Temp = null;
    private int Counter = 0;
    private int Calibration = 100;
    private bool CatchVariation = false;
    private int value = 0;
    protected override void OnInitialized()
    {
        httpClient.BaseAddress = new Uri(nav.BaseUri);
        StateHasChanged();
        getdata();
    }

    private async void getdata()
    {
        while (true)
        {
            try
            {
                var data = await Utils.HttpGet<TempData>(httpClient, "api/data/get");

                if (!data.IsSuccess || data.Data == null)
                {
                    Console.WriteLine("DATOS VACIOS");
                }
                else
                {
                    Temp = data.Data.Value <= 0 || data.Data.Value >= Calibration ? Calibration : data.Data.Value;


                    if (Temp < Calibration && !CatchVariation)
                    {
                        //Counter++;
                        CatchVariation = true;
                    }
                    if (CatchVariation && Temp >= Calibration)
                    {
                        Counter++;
                        CatchVariation = false;
                    }
                    StateHasChanged();

                }

                //await Task.Delay(50);
                StateHasChanged();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
            }
        }

    }
}